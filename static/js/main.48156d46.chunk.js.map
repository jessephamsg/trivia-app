{"version":3,"sources":["components/ScoreBoard.js","components/GameBody.js","components/Header.js","App.js","index.js"],"names":["ScoreBoard","props","addScore","bind","deductScore","resetScore","this","updateScore","className","currentScore","id","onClick","Component","GameBody","state","viewAnswer","toggleViewAnswer","getQuestion","setState","data","category","title","question","answer","Header","App","score","searchURL","fetch","json","JSONData","console","log","getData","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48156d46.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport class ScoreBoard extends Component {\n    constructor(props) {\n        super (props)\n        this.addScore = this.addScore.bind(this);\n        this.deductScore = this.deductScore.bind(this);\n        this.resetScore = this.resetScore.bind(this);\n    }\n    addScore () {\n        this.props.updateScore('add')\n    }\n    deductScore () {\n        this.props.updateScore('subtract')\n    }\n    resetScore () {\n        this.props.updateScore('reset')\n    }\n    render () {\n        return (\n            <div className='scoreBoard'>\n                <div>\n                <h2>Score: {this.props.currentScore}</h2>\n                </div>\n                <div id='scoreBoard-buttons'>\n                <button onClick={this.addScore} id='increase-button'>Increase</button>\n                <button onClick={this.deductScore} id='decrease-button'>Decrease</button>\n                <button onClick={this.resetScore} id='reset-button'>Reset</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ScoreBoard","import React, {Component} from 'react';\nimport ScoreBoard from './ScoreBoard.js';\nimport ReactMarkdown from 'react-markdown';\n\n\nexport class GameBody extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            viewAnswer: false\n        }\n        this.toggleViewAnswer = this.toggleViewAnswer.bind(this);\n        this.getQuestion = this.getQuestion.bind(this);\n    }\n    toggleViewAnswer () {\n        if (this.state.viewAnswer) {\n            this.setState({\n                viewAnswer: false\n            })\n        } else {\n            this.setState({\n                viewAnswer: true\n            })\n        }\n    }\n    getQuestion () {\n        this.props.getQuestion();\n        this.setState({\n            viewAnswer: false\n        })\n    }\n    render () {\n        return (\n            <div className='gameBody'>\n                <ScoreBoard updateScore={this.props.updateScore} currentScore={this.props.currentScore}/>\n                <div className='gameQuestions'>\n                    <h6>Category: {this.props.data.category.title}</h6>\n                    <h4>Question: {this.props.data.question}</h4>\n                    <div className='gameQuestions-buttons'>\n                    <button onClick={this.getQuestion} id='getQuestion-button'>Get New Question</button>\n                    <button onClick={this.toggleViewAnswer} id='toggleAnswer-button'>View Answer</button>\n                    </div>\n                    {(this.state.viewAnswer) ? \n                        <p> {this.props.data.answer} </p> : \n                        <p>.....</p>}\n                </div>\n            </div>\n        )\n    }\n} \n\nexport default GameBody","import React from 'react';\n\nfunction Header () {\n    return (\n        <div>\n            <h1>Jeopardy</h1>\n        </div>\n    )\n}\n\nexport default Header","import React, {Component} from 'react';\nimport './App.css';\nimport GameBody from './components/GameBody.js';\nimport Header from './components/Header.js';\n\nexport class App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: null,\n      score: 0,\n      searchURL: 'http://jservice.io/api/random'\n    }\n    this.updateScore = this.updateScore.bind(this);\n    this.getQuestion = this.getQuestion.bind(this);\n  }\n  async getData () {\n    try {\n      const data = await fetch(this.state.searchURL);\n      const JSONData = await data.json();\n      this.setState({\n        data: JSONData\n      })\n    } catch {\n      console.log('Failed to fetch data')\n    }\n  }\n  componentDidMount () {\n    this.getData()\n  }\n  getQuestion () {\n    this.getData()\n  }\n  updateScore (action) {\n    switch (action) {\n      case 'add':\n      this.setState({score: this.state.score + 1});\n      break;\n      case 'subtract':\n      this.setState({score: this.state.score - 1});\n      break;\n      case 'reset':\n      this.setState({score: 0});\n      break;\n      default: \n      this.setState({score: 0});\n    }\n  }\n  render () {\n    if(this.state.data===null) {\n      return (\n      <div>\n        <p>loading data...</p>\n      </div>\n      )\n    } else {\n      return ( \n        <div className=\"App\">\n          <Header />\n          <GameBody \n            data={this.state.data[0]} \n            updateScore ={this.updateScore} \n            currentScore={this.state.score} \n            getQuestion={this.getQuestion}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}